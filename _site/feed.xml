<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-09-27T16:49:10-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Leonardo Espinosa</title><subtitle>lead test engineer, musician and linguist. I love enchiladas.</subtitle><entry><title type="html">Resume Builder - The best way</title><link href="http://localhost:4000/resume-builder-the-best-way" rel="alternate" type="text/html" title="Resume Builder - The best way" /><published>2025-09-25T06:01:35-06:00</published><updated>2025-09-23T00:00:00-06:00</updated><id>http://localhost:4000/resume-builder-the-best-way</id><content type="html" xml:base="http://localhost:4000/resume-builder-the-best-way"><![CDATA[<p><em>Your Résumé Deserves Better: An Approach to ATS-Friendly Structure</em></p>

<p>Landing your next role shouldn’t be a battle against a robot. If you’ve ever felt like your résumé disappeared into a digital black hole after applying online, you’re not alone. The secret to getting noticed isn’t always about your experience (though that helps!), but about how your document is structured.</p>

<p>That’s why I built Resume Builder. It’s not a flashy design tool; it’s a project focused on the fundamentals: clean structure, ATS compatibility, and professional clarity—all served up in a minimalist, Harvard-style package.</p>

<h3 id="the-unwritten-rules-structure--the-ats-hurdle">The Unwritten Rules: Structure &amp; the ATS Hurdle</h3>

<p>Let’s be honest: your résumé’s first reader is a piece of software called an Applicant Tracking System (ATS). If the ATS can’t read your file correctly, a human recruiter will never even see it.</p>

<p><strong>What an ATS Hates (and Loves)</strong></p>

<p><strong>Hates:</strong> Fancy graphics, custom fonts, text boxes, tables, and complex multi-column layouts. (These elements confuse the parsing software, causing key data like dates or job titles) to drop out.</p>

<p><strong>Loves:</strong> A simple, single-column layout with clear section headings (Experience, Education, Skills). It wants plain, readable text that it can easily index.</p>

<h3 id="why-structure-is-your-superpower">Why Structure is Your Superpower</h3>

<p>Recruiters spend seconds scanning résumés. A properly style template works because it’s predictable. It prioritizes information and white space, guiding the reader’s eye quickly to the most important parts:</p>

<ul>
  <li><strong>Contact Info:</strong> Name, email, phone, and professional links.</li>
  <li><strong>Professional Experience:</strong> Clear start/end dates, company names, and action-verb-driven bullets that focus on quantifiable achievements, not just duties.</li>
  <li><strong>Education &amp; Skills:</strong> Easy-to-scan lists.</li>
</ul>

<p><br />
By adopting this minimal, data-first structure, you solve the machine problem and the human problem simultaneously.</p>

<h3 id="the-solution-resume-builder-explained">The Solution: resume-builder Explained</h3>

<p>I built this project to take the headache out of formatting and file compatibility, using modern web tech you can trust.</p>

<p><strong>1) Truly ATS-Friendly PDF Output</strong></p>

<p>This is the key differentiator. We use pdfmake to generate the final file. Why is this important? It creates a text-based PDF.</p>

<p>Unlike PDFs exported from image-heavy tools (like Canvas or some design apps), our output retains a clean, structured text layer, t he ATS reads the text layer directly, which means your skills and job titles won’t get garbled or lost.</p>

<p><strong>2) A Focused Builder, Not a Distracting Designer</strong></p>

<p>The tool is a minimalist form built with React, TypeScript, and Chakra UI. It guides you to input the right data in the right place, forcing you to focus on the content that matters. You control simple but crucial features, like toggling the visibility of hyperlinks for your contact info, also its important to notice that final PDF export is based on the last compiled snapshot, ensuring a consistent, reproducible document every time.</p>

<p><strong>3) Built for Openness and Future Growth</strong></p>

<p>The code is intentionally modular, not just for easy maintenance, but because I believe in the project’s future. It’s laid out cleanly , making it easy to jump in. It already supports English and Spanish via i18next, and the modular design paves the way for advanced features that actually help, like future integrations for AI content optimization or deeper ATS checks.</p>

<p>Want to see how it works? Visit the website <a href="https://leonardespi.me/resume-builder/">here</a></p>]]></content><author><name></name></author><category term="Projects" /><category term="productivity" /><summary type="html"><![CDATA[Your Résumé Deserves Better: An Approach to ATS-Friendly Structure]]></summary></entry><entry><title type="html">SPA - The System for thoughts and actions</title><link href="http://localhost:4000/spa" rel="alternate" type="text/html" title="SPA - The System for thoughts and actions" /><published>2025-09-22T06:01:35-06:00</published><updated>2025-09-23T00:00:00-06:00</updated><id>http://localhost:4000/spa</id><content type="html" xml:base="http://localhost:4000/spa"><![CDATA[<p><em>A compact field guide you can revisit</em></p>

<p>The <strong>System for Thought and Action (SPA)</strong> is a modular architecture for personal organization that integrates knowledge management, goal planning, and task execution. Unlike other systems, SPA enables the <strong>creation of new knowledge</strong> by fusing and maturing ideas that come from different life areas.</p>

<p>It is designed as a functional network of components that interact both hierarchically and bidirectionally—from deep thinking to everyday action—through a continuous process of iteration.</p>

<hr />

<h2 id="1-the-story--intent">1) The story &amp; intent</h2>

<p>SPA was born after 6 years of iterations that started from a simple frustration: I wasn’t able at all to organize myself, ideas lived in one place, my daily routine in another, and my expectations and ambitions in a third — none of them talked or were related. After trying to use Notion’s second brain, GTD, PARA (even habitica lol), I decided to create yhe <strong>System for Thought and Action</strong> in spanish <strong>Sistema de Pensamiento y Accion (SPA)</strong> as a solution to unify all of my islands. It treats your knowledge, goals, and time as one living network so that <strong>what you learn becomes what you ship</strong>—reliably and on purpose.</p>

<p><strong>Core:</strong> translate personal knowledge into tangible outcomes, starting from who you are, then moving through your life areas, projects, and finally into scheduled action.</p>

<hr />

<h2 id="2-why-this-system-works">2) Why this system works?</h2>

<ul>
  <li><strong>Bridges knowing and doing.</strong> Ideas mature into goals, then tasks, then calendar time blocks.</li>
  <li><strong>Creates new knowledge.</strong> Notes cross-link across life areas so patterns and insights emerge.</li>
  <li><strong>Adapts to your tools.</strong> It’s methodology-first and tool-agnostic.</li>
  <li><strong>Scales with you.</strong> Works for artists, engineers, students, founders — anyone who ships.</li>
  <li><strong>Encourages reflection.</strong> Built-in review loops sustain momentum and learning.</li>
</ul>

<hr />

<h2 id="3-the-model-four-layers-one-flow">3) The model (four layers, one flow)</h2>

<p>Think of SPA as a layered stack with feedback:</p>

<h4 id="first-layer">First layer</h4>

<p><strong>Keep (Fast memory / cache)</strong>: Quick capture of fragments, checklists, and frequently used info. It’s the inbox and scratchpad for ideas.</p>

<h4 id="second-layer">Second layer</h4>

<p><strong>Vault (Deep knowledge)</strong>: Linked notes where ideas mature: your life areas, your domains, your projects, reflections. <em>(Essentially is your identity in a file system vault)</em></p>

<h4 id="third-layer">Third layer</h4>

<p><strong>Tasks (Decisions)</strong>: You use tasks to develop projects, domains and eventually areas in your life, the goals are decomposed into executable steps.</p>

<h4 id="fourth-layer">Fourth layer:</h4>

<p><strong>Calendar (Time-boxing)</strong>: Blocks on the calendar are translated into accountble time spended on working for tasks and routines it gives all the projects  the required  attention for deep work, habits, and commitments.</p>

<p><br /></p>

<p><strong>Flow:</strong> Capture in <strong>Keep</strong> → mature in <strong>Vault</strong> → commit in <strong>Tasks</strong> → protect in <strong>Calendar</strong> → <strong>Review</strong> and feed learnings back into Vault.</p>

<pre><code class="language-mermaid">---
config:
  layout: dagre
---
flowchart TD
 subgraph subGraph0[" "]
        A["Cache Filter&lt;br&gt;&lt;i&gt;Temporary Input&lt;/i&gt;"]
        B["Vault&lt;br&gt;&lt;i&gt;Persistent Relational DB&lt;/i&gt;"]
        C["Tasks&lt;br&gt;&lt;i&gt;Input/Output&lt;/i&gt;"]
        D["Calendar&lt;br&gt;&lt;i&gt;Output Only&lt;/i&gt;"]
  end
    ExternalInput["User input &lt;br&gt; &lt;i&gt;information&lt;/i&gt;"] -- new information --&gt; A
    A -- important --&gt; B
    ExternalInput -- develop information --&gt; B
    D --&gt; DailyRoutine["Daily Routine Output"]
    A -- not important --&gt; Discarded("Trash")
    B -- project --&gt; C
    B -- habit --&gt; D
    C --&gt; Discarded
    ExternalInput -- develop task --&gt; C
    style A fill:#FFF9C4
    style B fill:#E1BEE7
    style C fill:#BBDEFB
    style D fill:#C3F7F7
    style ExternalInput fill:#C8E6C9
    style DailyRoutine fill:#FFE0B2
    style Discarded fill:#ffe6e6,stroke:#c00

</code></pre>

<hr />

<h2 id="4-quick-example">4) Quick example</h2>

<p><strong>Goal:</strong> Run a half marathon.</p>

<ol>
  <li><strong>Vault</strong>: <em>Area – Health</em> → <em>Domain - Running</em> → <em>Project – Half Marathon</em>; note motivations, constraints, references.</li>
  <li><strong>Tasks</strong>: Create sized tasks (S: pick training plan; M: buy shoes; L: long run; XL: monthly check-in).</li>
  <li><strong>Calendar</strong>: Block Tue/Thu (45m) + Sun (90m).</li>
  <li><strong>Keep</strong>: Pinned note with routes, shoe size, hydration checklist.</li>
  <li><strong>Daily</strong>: Execute blocks; move tasks; jot micro-learnings.</li>
  <li><strong>Weekly</strong>: Adjust plan, log progress in <em>Domain – Endurance Running</em> as patterns emerge.</li>
</ol>

<p><br /></p>

<p><em>note: people usually dont just casually decide to run half marathon, if you’re one of those people, you probably already have a health area and even a domain in running, domains are not meant to mutate that frequently or easily much less the Areas</em></p>

<hr />

<h2 id="6-how-to-start">6) How to start</h2>

<p>If you are interested in starting using spa, I strongly recommend you visit the <a href="https://github.com/leonardespi/spa">spa repo</a>, there you will find a much more extensive documentation and even the download of the boilerplate (if you want to use the recommended tools)</p>

<hr />]]></content><author><name></name></author><category term="Projects" /><category term="productivity" /><summary type="html"><![CDATA[A compact field guide you can revisit]]></summary></entry><entry><title type="html">The testing for the future</title><link href="http://localhost:4000/future-testing" rel="alternate" type="text/html" title="The testing for the future" /><published>2025-05-09T06:01:35-06:00</published><updated>2025-05-09T06:01:35-06:00</updated><id>http://localhost:4000/future-testing</id><content type="html" xml:base="http://localhost:4000/future-testing"><![CDATA[<p><strong>Before, testing software meant making sure the buttons worked.</strong>
Now it also means ensuring that a smart contract doesn’t lose millions, that an API survives in distributed production, or that a blind person can access your app without barriers.</p>

<p><strong>The QA of the future is already here.</strong></p>

<hr />

<h3 id="blockchain-testing-the-immutable-must-be-tested-too">Blockchain Testing: the immutable must be tested too</h3>

<p>When we hear “blockchain,” many think of cryptocurrencies.
But from a QA perspective, <strong>the real challenge lies in smart contracts</strong>.
These small programs that run on Ethereum, Solana, or other networks <strong>are immutable once deployed</strong>.
An error doesn’t just break functionality—it can <strong>cost millions or be exploited by attackers.</strong></p>

<p>Testing smart contracts isn’t just writing unit tests. It’s understanding:</p>

<ul>
  <li>how <strong>gas fees</strong> are calculated,</li>
  <li>how a malicious user can manipulate a transaction,</li>
  <li>and how the system behaves in the face of forks, consensus failures, or Sybil attacks.</li>
</ul>

<p><strong>Ganache</strong>, <strong>Hardhat</strong>, and static analysis tools like <strong>Mythril</strong> or <strong>Slither</strong> become indispensable.
Here the QA turns into a <strong>crypto-detective</strong>: validation isn’t enough—you have to anticipate.</p>

<hr />

<h3 id="cloud-native-testing-between-containers-and-chaos">Cloud-Native Testing: between containers and chaos</h3>

<p>The promise of modern software is clear: auto-scale, survive failures, deploy in seconds.
But for that to work, <strong>QA also has to become cloud-native</strong>.</p>

<p>Today you no longer test “an app.” You test:</p>

<ul>
  <li>a dozen microservices that communicate over REST APIs,</li>
  <li>running in pods inside Kubernetes,</li>
  <li>with real-time orchestrated data flows.</li>
</ul>

<p>And functional tests aren’t enough. You must test:</p>

<ul>
  <li>what happens if a microservice goes down (<em>fault injection</em>),</li>
  <li>how the system behaves under traffic spikes (<em>stress &amp; scalability</em>),</li>
  <li>and how a version change impacts production (<em>canary testing</em>).</li>
</ul>

<p>The toolkit shifts: <strong>K6</strong>, <strong>Postman + Newman</strong>, <strong>LitmusChaos</strong>, <strong>Istio</strong>, <strong>TestContainers</strong>…</p>

<p>Here QA <strong>doesn’t sit back to test</strong>: they dive into the cluster, monitor with Grafana, and break things to validate resilience.</p>

<hr />

<h3 id="advanced-accessibility-testing-because-inclusion-is-not-optional">Advanced Accessibility Testing: because inclusion is not optional</h3>

<p>I grew up watching technology ignore my mother, who is deaf.
And although we’ve made progress, many applications <strong>still aren’t designed for everyone</strong>.</p>

<p>Accessibility testing (A11y) is no longer just checking for <code class="language-plaintext highlighter-rouge">alt</code> labels.
It means validating:</p>

<ul>
  <li>that screen readers don’t choke,</li>
  <li>that contrast allows reading with low vision,</li>
  <li>that keyboard navigation is complete,</li>
  <li>that forms work with assistive technologies.</li>
</ul>

<p>Today, tools like <strong>axe-core</strong>, <strong>WAVE</strong>, <strong>Lighthouse</strong>, and even Figma plugins help…
But <strong>nothing replaces real testing with diverse users.</strong>
An app can pass every automated check and still be a nightmare for someone with dyslexia or paralysis.</p>

<p><strong>Accessibility isn’t a nice-to-have.
It’s part of quality. And if QA doesn’t test it, who will?</strong></p>

<hr />

<p>It’s in our hands as testers to drive this change.</p>]]></content><author><name></name></author><category term="Quality Assurance" /><category term="testing" /><summary type="html"><![CDATA[Before, testing software meant making sure the buttons worked. Now it also means ensuring that a smart contract doesn’t lose millions, that an API survives in distributed production, or that a blind person can access your app without barriers.]]></summary></entry><entry><title type="html">Bias, hallucinations and dirty data</title><link href="http://localhost:4000/bias-hallucinations-dirty-data" rel="alternate" type="text/html" title="Bias, hallucinations and dirty data" /><published>2025-04-29T06:01:35-06:00</published><updated>2025-04-29T00:00:00-06:00</updated><id>http://localhost:4000/bias-hallucinations-dirty-data</id><content type="html" xml:base="http://localhost:4000/bias-hallucinations-dirty-data"><![CDATA[<p><strong>Errors are no longer always in the code…</strong></p>

<p>For years, the logic was clear: if something fails, it’s because the code has a bug. A poorly written conditional, an out-of-range index, an unvalidated input…
But in the era of artificial intelligence, errors no longer hide (only) between lines of code: they now live in the data, in the models, and—most worryingly—in undetected biases.</p>

<p>Today, the tester’s role is changing. We are moving away from being simple <em>functionality verifiers</em> to becoming <em>evaluators of judgment, context, and consequences</em>.</p>

<p><br /></p>

<h3 id="what-does-it-mean-to-test-an-ai-model">What does it mean to test an AI model?</h3>

<p>In traditional systems, a test fails if the system doesn’t behave as expected.
But with AI models—especially generative or predictive ones—<strong>there isn’t a single “correct answer,”</strong> but a range of possible outputs… and that changes everything.</p>

<p><strong>The new QA isn’t about checking whether something “works,” but whether it “makes sense.”</strong></p>

<p>One of the most common challenges when testing generative models (like LLMs or conversational AI) is detecting <em>incoherences</em>, <em>contradictions</em>, or <em>responses that simply don’t hold up</em>.</p>

<p>For example:</p>

<ul>
  <li>A chatbot that recommends aspirin to someone allergic to NSAIDs.</li>
  <li>A generated summary that omits key points from the original text.</li>
  <li>An assistant AI that invents features that don’t exist.</li>
</ul>

<p>These aren’t classic bugs. They are <em>reasoning</em> errors by the model. And to find them, <strong>QA must adopt the role of a critical evaluator</strong> rather than a purely technical verifier.</p>

<p><br /></p>

<h3 id="when-ai-hallucinates">When AI hallucinates</h3>

<p>One of the best-documented problems with language models is their tendency to <strong>hallucinate false information with complete confidence</strong>.</p>

<p>Real example:
An AI generates a biography with achievements that never happened, books that don’t exist, or universities the user never attended.</p>

<p>These <em>hallucinations</em> are hard to test with automated scripts because they require:</p>

<ul>
  <li><strong>Domain knowledge.</strong></li>
  <li><strong>Factual verification.</strong></li>
  <li><strong>Human judgment.</strong></li>
</ul>

<p>Here, <strong>QA becomes a detective</strong>. We aren’t hunting syntax errors; we’re uncovering well-told fictions. And that’s a completely new challenge.</p>

<p><br /></p>

<h3 id="fairness-bias-and-accessibility-the-invisible-testing">Fairness, bias, and accessibility: the invisible testing</h3>

<p>This point is personal for me.
I grew up watching my mother—a deaf woman—constantly adapt to technology that wasn’t designed for her. From faulty auto-captions to voice assistants that never understood her.</p>

<p>That’s why, when testing AI systems, I find this question essential:
<strong>Who was this model trained for? Who is it leaving out?</strong></p>

<p>Algorithmic biases can cause:</p>

<ul>
  <li>Discrimination by gender, age, race, or language.</li>
  <li>Exclusion of users with disabilities.</li>
  <li>The reproduction of harmful stereotypes (even within the training data).</li>
</ul>

<p><br />
<strong>QA must assume an ethical role</strong>, not just a technical one.</p>

<p>Review should include fairness, dataset diversity, and impact assessment.</p>

<p>Because if the model was trained only on the voices of white men, <strong>how can we expect it to understand other realities?</strong></p>

<p><br /></p>

<h3 id="are-we-ready">Are we ready?</h3>

<p>The short answer: not entirely.
But this is precisely where QA has the opportunity to <strong>lead the change</strong>.</p>

<p>QA in the new era doesn’t just validate outputs. <strong>It interprets results, anticipates consequences, and defends the real user experience</strong>—the one so often ignored by models trained on impersonal data.</p>]]></content><author><name></name></author><category term="IA" /><category term="ia" /><summary type="html"><![CDATA[Errors are no longer always in the code…]]></summary></entry><entry><title type="html">Complete answers and incomplete evaluations</title><link href="http://localhost:4000/complete-answers-incomplete-evaluations" rel="alternate" type="text/html" title="Complete answers and incomplete evaluations" /><published>2025-04-25T06:01:35-06:00</published><updated>2025-02-23T00:00:00-06:00</updated><id>http://localhost:4000/complete-answers-incomplete-evaluations</id><content type="html" xml:base="http://localhost:4000/complete-answers-incomplete-evaluations"><![CDATA[<p>Today I want to talk about something that recently happened to myself that, while it may seem minor, can have a profound impact both on candidates’ experience and on hiring quality: <strong>excessive standardization in recruitment processes</strong>, often used as the wrong response to high candidate inflow. In an effort to handle large volumes of applications, it’s increasingly common for the early stages of the process to be in the hands of minimally specialized screeners, guided by <strong>stock answer manuals</strong>.</p>

<p>I recently had an experience that made me reflect. During a technical interview, I faced very general questions—some at a basic level. Naturally, I answered thoroughly, aiming not only to address the question, but also to add context, best practices, and real-world experience.</p>

<p>The subsequent feedback was curious: “<strong>the answers weren’t clear</strong>.”</p>

<p>This made me wonder: <strong>at what point does a complete answer become “unclear”?</strong>
I believe the answer lies in this tendency to evaluate based on rigid patterns rather than on the actual quality of thinking or the experience behind the responses. When an interview process is overly standardized, interviewers (or screeners) tend to look for “stock answers” instead of evaluating the depth and relevance of the content. We lose the ability to recognize that an experienced professional doesn’t respond just to “give the right answer,” but to <strong>connect the question with real scenarios</strong>, <strong>practical nuances</strong>, and <strong>added value</strong>.</p>

<p>In such a system, <strong>answers that don’t fit exactly into the reference manual may be seen as confusing</strong>, even though they are richer, deeper, and more useful than a memorized response.</p>

<p><strong>The problem isn’t a lack of clarity in the answer.
It’s the lack of judgment in interpreting more elaborate responses.</strong></p>

<h3 id="what-are-we-losing">What are we losing?</h3>

<p>When standardization and answer manuals replace professional judgment, the following happens:</p>

<ul>
  <li>Candidates who think critically and strategically are rejected.</li>
  <li>Those who give mechanical, superficial answers are favored.</li>
  <li>Creativity, analysis, and context are discouraged.</li>
  <li>The possibility of building teams diverse in thought and real capability is eroded.</li>
</ul>

<p>The end result is worrying: <strong>organizations that hire to fit processes, not to build truly high-impact teams</strong>.</p>]]></content><author><name></name></author><category term="Interview" /><category term="tech" /><summary type="html"><![CDATA[Today I want to talk about something that recently happened to myself that, while it may seem minor, can have a profound impact both on candidates’ experience and on hiring quality: excessive standardization in recruitment processes, often used as the wrong response to high candidate inflow. In an effort to handle large volumes of applications, it’s increasingly common for the early stages of the process to be in the hands of minimally specialized screeners, guided by stock answer manuals.]]></summary></entry><entry><title type="html">Big O - Algorythms</title><link href="http://localhost:4000/big-o" rel="alternate" type="text/html" title="Big O - Algorythms" /><published>2025-03-25T06:01:35-06:00</published><updated>2025-03-25T00:00:00-06:00</updated><id>http://localhost:4000/big-o</id><content type="html" xml:base="http://localhost:4000/big-o"><![CDATA[<p>Today I want to talk to you about something that, while it may seem intimidating at first, is <strong>absolutely essential</strong> if you want to build a solid career in Tech … and that is … <strong>Big O Notation</strong>.</p>

<p><strong>Understanding Big O in a practical way can be the difference between writing solutions that merely work and designing systems that scale, endure, and succeed in the real world.</strong></p>

<p>Let’s go step by step:</p>

<hr />

<h3 id="what-is-big-o-notation">What is Big O Notation?</h3>

<p>Big O Notation is a <strong>formal language</strong> we use to <strong>describe how an algorithm behaves as the input grows</strong>.</p>

<p>It’s not about measuring specific runtimes in seconds or milliseconds. <strong>It’s about understanding how the amount of resources the algorithm needs (time or memory) changes as the data grows.</strong></p>

<p>In other words: <strong>Big O abstracts away hardware, language, and local optimizations</strong> to focus on scalability.</p>

<p>Example:</p>

<ul>
  <li>An algorithm that processes each element exactly once has linear time: <strong>O(n)</strong>.</li>
  <li>One that compares every element against every other has quadratic time: <strong>O(n²)</strong>.</li>
</ul>

<hr />

<h3 id="why-is-it-so-important">Why is it so important?</h3>

<p>If you’re going to build real applications, you shouldn’t only ask:
<em>“Does it work on my laptop with 5 data points?”</em>
but also:
<em>“What happens when this system handles 5 million concurrent users?”</em></p>

<p>Big O lets you:</p>

<ul>
  <li><strong>Compare algorithms</strong>: choose the best solution for a given problem.</li>
  <li><strong>Anticipate bottlenecks</strong>: before your production servers collapse.</li>
  <li><strong>Pass technical interviews</strong>: most SDE (Software Development Engineer) interviews use algorithm problems where you must analyze efficiency.</li>
  <li><strong>Design scalable systems</strong>: thinking about the future, not just the present.</li>
</ul>

<p>A poor complexity decision can turn a working system into <strong>an unmanageable monster</strong>.</p>

<hr />

<h2 id="the-most-common-complexities-and-how-to-spot-them">The most common complexities (and how to spot them)</h2>

<p>Here’s a mini guide to situate typical algorithmic complexities:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Notation</th>
      <th style="text-align: left">Description</th>
      <th style="text-align: left">Common example</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center"><strong>O(1)</strong></td>
      <td style="text-align: left">Constant. Does not depend on input size.</td>
      <td style="text-align: left">Direct access to an array element (<code class="language-plaintext highlighter-rouge">arr[i]</code>).</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>O(log n)</strong></td>
      <td style="text-align: left">Logarithmic. Input is halved each step.</td>
      <td style="text-align: left">Binary search on a sorted array.</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>O(n)</strong></td>
      <td style="text-align: left">Linear. Processes each element once.</td>
      <td style="text-align: left">Sequential search in an unsorted list.</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>O(n log n)</strong></td>
      <td style="text-align: left">Quasilinear. Mix of linearity and logarithm.</td>
      <td style="text-align: left">Merge Sort, average-case QuickSort.</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>O(n²)</strong></td>
      <td style="text-align: left">Quadratic. Each element is compared with all others.</td>
      <td style="text-align: left">Brute-force pair search.</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>O(2ⁿ)</strong></td>
      <td style="text-align: left">Exponential. Grows dangerously fast.</td>
      <td style="text-align: left">Solving subset-sum by brute force.</td>
    </tr>
    <tr>
      <td style="text-align: center"><strong>O(n!)</strong></td>
      <td style="text-align: left">Factorial. Infeasible for large inputs.</td>
      <td style="text-align: left">Pure permutation solutions (as in TSP).</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="how-do-you-analyze-an-algorithms-complexity">How do you analyze an algorithm’s complexity?</h2>

<p>When determining an algorithm’s Big O, focus on:</p>

<ol>
  <li>
    <p><strong>Identifying nested loops</strong>:</p>

    <ul>
      <li>Each nested loop typically multiplies complexity.</li>
    </ul>
  </li>
  <li>
    <p><strong>Recognizing problem division</strong>:</p>

    <ul>
      <li>Does the problem split in halves recursively? Think <strong>O(log n)</strong> or <strong>O(n log n)</strong>.</li>
    </ul>
  </li>
  <li>
    <p><strong>Evaluating recursion</strong>:</p>

    <ul>
      <li>Recursion trees can reveal hidden complexities.</li>
    </ul>
  </li>
  <li>
    <p><strong>Ignoring constants</strong>:</p>

    <ul>
      <li><strong>O(2n)</strong> is the same as <strong>O(n)</strong> at scale.</li>
    </ul>
  </li>
  <li>
    <p><strong>Focusing on the dominant term</strong>:</p>

    <ul>
      <li>If you have <strong>O(n² + n)</strong>, you keep <strong>O(n²)</strong> to describe growth.</li>
    </ul>
  </li>
</ol>

<p><br />
<strong>Practical rule</strong>:<br />
When in doubt, simulate how runtime grows as input grows and note which pattern dominates.</p>

<hr />

<h2 id="big-o-in-technical-interviews">Big O in technical interviews</h2>

<p><strong>Pro tip</strong>: Writing a working algorithm isn’t enough.
In technical interviews (Google, Amazon, Microsoft, etc.) they expect you to:</p>

<ul>
  <li>Implement a solution that is both <strong>functional and efficient</strong>.</li>
  <li>Explain your reasoning about time and space complexity.</li>
  <li>Propose improvements if you find bottlenecks.</li>
</ul>

<p><br />
Many times, improving from <strong>O(n²)</strong> to <strong>O(n log n)</strong> can be <strong>the difference between a “thanks for your time” and “we’d like to make you an offer.”</strong></p>]]></content><author><name></name></author><category term="Coding" /><category term="tech" /><summary type="html"><![CDATA[Today I want to talk to you about something that, while it may seem intimidating at first, is absolutely essential if you want to build a solid career in Tech … and that is … Big O Notation.]]></summary></entry><entry><title type="html">Productivity Systems</title><link href="http://localhost:4000/productivity-systems" rel="alternate" type="text/html" title="Productivity Systems" /><published>2025-03-16T06:01:35-06:00</published><updated>2025-02-23T00:00:00-06:00</updated><id>http://localhost:4000/productivity-systems</id><content type="html" xml:base="http://localhost:4000/productivity-systems"><![CDATA[<p>Today I want to talk to you about a topic that’s been a roller coaster in my life: <strong>personal productivity</strong>.</p>

<p>Between courses, books, and YouTube, we hear a thousand times about systems like <strong>GTD (Getting Things Done)</strong>, <strong>PARA</strong>, <strong>Zettelkasten</strong>, <strong>Time Blocking</strong>, and many others.
But the real struggle is certainly <strong>not knowing they exist</strong>, but <strong>making them work</strong>.</p>

<h3 id="what-are-gtd-and-para-and-why-is-everyone-talking-about-them">What are GTD and PARA, and why is everyone talking about them?</h3>

<p><strong>GTD</strong>, created by David Allen, is a method built on a very powerful idea:</p>

<blockquote>
  <p><strong>Your mind is for having ideas, not for holding them.</strong></p>
</blockquote>

<p>In GTD, everything starts by capturing EVERYTHING outside your head—into lists, inboxes, or digital tools—and then processing and organizing it into clear actions.</p>

<p><strong>PARA</strong>, by Tiago Forte, is more modern and minimalist:</p>

<blockquote>
  <p><strong>Organize all your information into four areas: Projects, Areas, Resources, Archives.</strong></p>
</blockquote>

<p>This way, instead of getting lost in a sea of folders or endless lists, you know exactly where to store and where to find anything.</p>

<ul>
  <li><strong>Projects</strong>: everything with a goal and a deadline (e.g., launch your website, finish your thesis).</li>
  <li><strong>Areas</strong>: everything you maintain continuously (e.g., health, finances, relationships).</li>
  <li><strong>Resources</strong>: reference material for when you need it (e.g., articles, courses, templates).</li>
  <li><strong>Archives</strong>: things completed or no longer relevant that you still want to keep.</li>
</ul>

<h3 id="does-real-productivity-come-from-using-a-perfect-system">Does real productivity come from using a perfect system?</h3>

<p>At least in my experience, what I can tell you is <strong>no</strong>.</p>

<p>What makes the difference isn’t using <em>Notion</em>, <em>Keep Notes</em>, <em>Obsidian</em>, or the prettiest tool in the world.</p>

<p>What matters is <strong>having a system (even an ugly one) that gets things out of your head and lets you clearly see what to do next</strong>.</p>

<p>Because in the end, <strong>being productive isn’t doing more things</strong>. <strong>It’s doing better the things that truly matter.</strong></p>

<p>So if you’re starting out or want to improve your workflow:</p>

<ul>
  <li><strong>Start small</strong>: A notebook, a simple app—whatever you can maintain.</li>
  <li><strong>Refine over time</strong>: Don’t marry a method. Steal what works for you from each one.</li>
  <li><strong>Remember that productivity is not an end. It’s a means to live better.</strong></li>
</ul>

<p>Because at the end of the day, <strong>what matters isn’t being more productive… it’s being freer.</strong></p>

<p>See you in the next post!</p>]]></content><author><name></name></author><category term="Productivity" /><category term="productivity" /><summary type="html"><![CDATA[Today I want to talk to you about a topic that’s been a roller coaster in my life: personal productivity.]]></summary></entry><entry><title type="html">Ace the interview</title><link href="http://localhost:4000/ace-the-interview" rel="alternate" type="text/html" title="Ace the interview" /><published>2025-03-06T06:01:35-06:00</published><updated>2025-02-23T00:00:00-06:00</updated><id>http://localhost:4000/ace-the-interview</id><content type="html" xml:base="http://localhost:4000/ace-the-interview"><![CDATA[<p>After a long and well-deserved break, I’m back to this project. Today I want to talk about a topic that was central during the months I was away: job interviews. Some people hate them, others love them. But if you’re in the first group, think of it this way: an interview is your stage to shine. <em>(If you’re in the second group, you can skip this post.)</em></p>

<h3 id="preparation-is-power">Preparation is Power</h3>

<p>As Benjamin Franklin said, “If you fail to prepare, you are preparing to fail.” <strong>Not doing your research shows a lack of interest.</strong> Go beyond memorizing facts; understand the company’s mission, vision, and values, its culture, and the specific role. At the very least, take the time to Google the company <em>(I don’t think you want to join a company only to find out later it’s being investigated by the FBI).</em></p>

<p>Don’t memorize robotic answers, but do <strong>have your key messages</strong> and concrete examples clear. Remember that while you don’t need to control the interview, it’s essential to demonstrate confidence and certainty in the answers you give the panel.</p>

<p>At the end of the day, an interview is a conversation. Asking <strong>well-thought-out questions</strong> shows interest and critical thinking. Avoid asking obvious things or focusing only on benefits at the start. Ask about the recruiter’s history at the company, what a typical day looks like, etc.</p>

<p><strong>Details matter!</strong> Test your tech in advance. Dress professionally <em>(Don’t make my mistake and wear a baseball jersey).</em> Greet confidently, maintain eye contact throughout the interview, smile, and be kind to everyone.</p>

<p>Once you’ve made it past introductions, conversation, and the Q&amp;A, remember the interview doesn’t end when you walk out. If the stated timeline passes without news, a polite follow-up email is appropriate. If you get a “no,” thank them professionally; it’s a learning experience. And if you get an offer—congratulations!</p>

<p><strong>Remember</strong></p>

<ul>
  <li><strong>Preparation is everything</strong>: Research, practice your answers, and ask smart questions.</li>
  <li><strong>Communicate with impact</strong>: Verbally and non-verbally, using STAR to provide evidence.</li>
  <li><strong>Follow-up matters</strong>: A thank-you note makes a difference.</li>
</ul>

<p>Every interview is an opportunity to learn and move closer to your goal. <strong>Trust your preparation, be authentic, and go for it!</strong></p>

<p>See you in the next post!</p>]]></content><author><name></name></author><category term="Interview" /><category term="interview" /><category term="experiences" /><summary type="html"><![CDATA[After a long and well-deserved break, I’m back to this project. Today I want to talk about a topic that was central during the months I was away: job interviews. Some people hate them, others love them. But if you’re in the first group, think of it this way: an interview is your stage to shine. (If you’re in the second group, you can skip this post.)]]></summary></entry><entry><title type="html">Chilaquiles y alambre</title><link href="http://localhost:4000/chilaquiles-y-alambre" rel="alternate" type="text/html" title="Chilaquiles y alambre" /><published>2025-02-23T06:01:35-06:00</published><updated>2025-02-23T00:00:00-06:00</updated><id>http://localhost:4000/chilaquiles-y-alambre</id><content type="html" xml:base="http://localhost:4000/chilaquiles-y-alambre"><![CDATA[<p>“<strong>Chilaquiles y alambre</strong>” is part of the EP <em>Chilaquiles con recuerdos</em>—the beginning of a journey. It speaks to the feeling of a love once close that has faded. The song is about a memory that, though <strong>ephemeral</strong>, is also constant and sharp; simple things like the rumble of the metro or a plate of green chilaquiles are enough to set synapses firing in our brains.</p>

<p>I wanted to capture the bittersweet sensation of missing someone—so intensely that you see their ghost in every ordinary corner, like in the passing trains. I kept recalling those simple yet powerful moments: meeting their family, trading jokes over chilaquiles and long conversations. The way those memories turned into soft stabs when I faced the current distance is essential to the song.</p>

<p>But amid all that feeling, a part of me clung to the idea that such affection couldn’t just vanish. That’s why the line “<strong>te espero con el cora abierto</strong>” (“I’m waiting with my heart wide open”) and that final “<strong>plissss vuelve ya</strong>” (“please come back now”) are truly a whisper from the heart—a whisper from a heart still beating hard for that person.</p>

<p>It was like trying to trap in words the thought: <strong>“they’re gone… but maybe…”</strong></p>]]></content><author><name></name></author><category term="Music" /><category term="music" /><summary type="html"><![CDATA[“Chilaquiles y alambre” is part of the EP Chilaquiles con recuerdos—the beginning of a journey. It speaks to the feeling of a love once close that has faded. The song is about a memory that, though ephemeral, is also constant and sharp; simple things like the rumble of the metro or a plate of green chilaquiles are enough to set synapses firing in our brains.]]></summary></entry><entry><title type="html">Paleta Payaso</title><link href="http://localhost:4000/paleta-payaso" rel="alternate" type="text/html" title="Paleta Payaso" /><published>2025-02-23T06:01:35-06:00</published><updated>2025-02-23T00:00:00-06:00</updated><id>http://localhost:4000/paleta-payaso</id><content type="html" xml:base="http://localhost:4000/paleta-payaso"><![CDATA[<p>“<strong>Paleta Payaso</strong>” was born from the silly, dumb, foolish confusion that infatuation leaves you with.</p>

<p>It’s as if someone walks past you and, suddenly, the world fills with colors and promises. That quick idealization—that feeling of being intensely loved from the start—clouds your judgment.</p>

<p>You buy into the story of the beautiful, smiling person who kisses you and says they love you. But then the mask falls, and you see the arrogance, that it was all a strategy—blatant <strong>love bombing</strong>.</p>

<p>The song is that mix of anger at having fallen so naively, of feeling like a manipulated child, and, at the same time, that pang of having wanted to be <strong>“the one.”</strong></p>

<p>And in the end, all the anger you have stays in your hands, because you’re not capable of hurting that person; you wish them things like a piece of gum stuck to their shoe, or that their <strong>Paleta Payaso</strong> turns out ugly.</p>

<p>It’s a raw song about the disappointment of a false love and the vulnerability of getting caught in its net.</p>]]></content><author><name></name></author><category term="Music" /><category term="music" /><summary type="html"><![CDATA[“Paleta Payaso” was born from the silly, dumb, foolish confusion that infatuation leaves you with.]]></summary></entry></feed>